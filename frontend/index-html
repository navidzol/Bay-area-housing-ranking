<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bay Area Housing Criteria Map</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #3b82f6;
            --primary-light: #60a5fa;
            --primary-dark: #2563eb;
            --secondary: #6366f1;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #06b6d4;
            --light: #f9fafb;
            --dark: #1f2937;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-400: #9ca3af;
            --gray-500: #6b7280;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --radius-sm: 0.125rem;
            --radius: 0.25rem;
            --radius-md: 0.375rem;
            --radius-lg: 0.5rem;
            --radius-xl: 0.75rem;
            --radius-2xl: 1rem;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            color: var(--gray-800);
            line-height: 1.5;
            background-color: var(--gray-50);
            height: 100vh;
            overflow: hidden;
        }

        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        /* Header styles */
        .header {
            background-color: white;
            box-shadow: var(--shadow);
            padding: 0.75rem 1.5rem;
            z-index: 20;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-800);
        }

        .logo i {
            color: var(--primary);
        }

        .last-updated {
            font-size: 0.75rem;
            color: var(--gray-500);
            margin-left: auto;
        }

        .header-actions {
            display: flex;
            gap: 0.75rem;
        }

        /* Main content */
        .main-content {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        /* Map container */
        .map-container {
            flex: 1;
            height: 100%;
            position: relative;
        }

        /* Control panel */
        .control-panel {
            width: 320px;
            background-color: white;
            border-left: 1px solid var(--gray-200);
            height: 100%;
            overflow-y: auto;
            box-shadow: var(--shadow-md);
            z-index: 10;
            display: flex;
            flex-direction: column;
        }

        .panel-section {
            padding: 1.25rem;
            border-bottom: 1px solid var(--gray-200);
        }

        .panel-title {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--gray-800);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .panel-title i {
            color: var(--primary);
        }

        /* Criteria list */
        .criteria-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .criteria-item {
            background-color: var(--gray-50);
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-md);
            padding: 0.875rem;
            transition: all 0.2s;
        }

        .criteria-item:hover {
            box-shadow: var(--shadow);
            transform: translateY(-1px);
        }

        .criteria-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.625rem;
        }

        .criteria-name {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
        }

        .criteria-range {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .criteria-weight {
            width: 55px;
            text-align: center;
            padding: 0.25rem;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.875rem;
        }

        .weight-label {
            font-size: 0.75rem;
            color: var(--gray-500);
        }

        .delete-criterion {
            background: none;
            border: none;
            color: var(--gray-400);
            cursor: pointer;
            transition: color 0.2s;
        }

        .delete-criterion:hover {
            color: var(--danger);
        }

        .criteria-enabled {
            margin-right: 0.5rem;
        }

        /* Add criterion form */
        .add-criterion-form {
            margin-top: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .form-label {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--gray-600);
        }

        .form-input {
            padding: 0.5rem 0.75rem;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.875rem;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-select {
            padding: 0.5rem 0.75rem;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.875rem;
            background-color: white;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: var(--radius);
            font-weight: 500;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-secondary {
            background-color: white;
            color: var(--gray-700);
            border: 1px solid var(--gray-300);
        }

        .btn-secondary:hover {
            background-color: var(--gray-50);
        }

        .btn-success {
            background-color: var(--success);
            color: white;
        }

        .btn-success:hover {
            background-color: #0da571;
        }

        .btn-danger {
            background-color: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background-color: #dc2626;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

        .btn-icon {
            padding: 0.5rem;
        }

        .btn-block {
            width: 100%;
        }

        /* Action buttons */
        .action-buttons {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        /* Details panel */
        .details-section {
            flex: 1;
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
            min-height: 250px;
        }

        .details-content {
            background-color: var(--gray-50);
            border-radius: var(--radius-lg);
            padding: 1.25rem;
            flex: 1;
        }

        .details-placeholder {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            color: var(--gray-500);
            text-align: center;
        }

        .details-placeholder i {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            opacity: 0.5;
        }

        .zipcode-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--gray-200);
        }

        .zipcode-name {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .score-pill {
            display: inline-flex;
            align-items: center;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 0.25rem 0.625rem;
            border-radius: 1rem;
            font-weight: 600;
        }

        .rating-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .rating-item {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0.75rem;
            background-color: white;
            border-radius: var(--radius);
            border: 1px solid var(--gray-200);
        }

        .rating-name {
            color: var(--gray-600);
        }

        .rating-value {
            font-weight: 500;
        }

        /* Legend */
        .map-legend {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background-color: white;
            border-radius: var(--radius-md);
            padding: 0.75rem 1rem;
            box-shadow: var(--shadow-md);
            z-index: 10;
            max-width: 240px;
        }

        .legend-title {
            font-weight: 600;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .color-gradient {
            height: 12px;
            border-radius: var(--radius);
            margin-bottom: 0.25rem;
            background: linear-gradient(to right, #f8696b, #ffeb84, #63be7b);
        }

        .color-labels {
            display: flex;
            justify-content: space-between;
            font-size: 0.75rem;
            color: var(--gray-600);
        }

        /* Update modal */
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 30;
            backdrop-filter: blur(2px);
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }

        .modal-backdrop.active {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            background-color: white;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            width: 90%;
            max-width: 500px;
            transform: translateY(20px);
            transition: transform 0.3s;
        }

        .modal-backdrop.active .modal {
            transform: translateY(0);
        }

        .modal-header {
            padding: 1.25rem;
            border-bottom: 1px solid var(--gray-200);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.125rem;
            font-weight: 600;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.25rem;
            color: var(--gray-500);
            cursor: pointer;
        }

        .modal-close:hover {
            color: var(--gray-800);
        }

        .modal-body {
            padding: 1.25rem;
        }

        .modal-footer {
            padding: 1.25rem;
            border-top: 1px solid var(--gray-200);
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
        }

        /* Update button */
        .update-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.375rem;
            padding: 0.4375rem 0.875rem;
            background-color: white;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.8125rem;
            font-weight: 500;
            color: var(--gray-700);
            cursor: pointer;
            transition: all 0.2s;
        }

        .update-btn:hover {
            border-color: var(--gray-400);
            background-color: var(--gray-50);
        }

        .update-indicator {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: var(--success);
            margin-left: 0.25rem;
        }

        /* Progress indicator */
        .progress-indicator {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background-color: var(--gray-200);
            z-index: 25;
            overflow: hidden;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .progress-indicator.active {
            opacity: 1;
        }

        .progress-bar {
            height: 100%;
            background-color: var(--primary);
            width: 0%;
            transition: width 0.3s;
        }

        /* Loading overlay */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 20;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }

        .loading-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .loading-spinner {
            width: 48px;
            height: 48px;
            border: 4px solid var(--gray-200);
            border-top-color: var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

        .loading-text {
            font-weight: 500;
            color: var(--gray-700);
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Media queries */
        @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
            }

            .control-panel {
                width: 100%;
                height: 50%;
                border-left: none;
                border-top: 1px solid var(--gray-200);
            }

            .map-container {
                height: 50%;
            }
        }

        /* Responsive adjustments */
        @media (max-width: 640px) {
            .header-content {
                flex-direction: column;
                align-items: flex-start;
                padding: 0.75rem 0;
            }

            .header-actions {
                width: 100%;
                justify-content: space-between;
            }

            .last-updated {
                margin-left: 0;
                margin-top: 0.25rem;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Progress indicator for data loading -->
        <div class="progress-indicator" id="progress-indicator">
            <div class="progress-bar" id="progress-bar"></div>
        </div>

        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-map-location-dot"></i>
                    <span>Bay Area Housing Criteria Map</span>
                </div>
                <div class="last-updated" id="last-updated">
                    Last updated: Loading...
                </div>
                <div class="header-actions">
                    <button class="update-btn" id="update-data-btn">
                        <i class="fas fa-sync-alt"></i>
                        <span>Refresh Data</span>
                        <span class="update-indicator"></span>
                    </button>
                </div>
            </div>
        </header>

        <!-- Main content -->
        <div class="main-content">
            <!-- Map container -->
            <div class="map-container" id="map">
                <!-- Map will be rendered here -->

                <!-- Map legend -->
                <div class="map-legend">
                    <div class="legend-title">Criteria Score</div>
                    <div class="color-gradient"></div>
                    <div class="color-labels">
                        <span>Low</span>
                        <span>Medium</span>
                        <span>High</span>
                    </div>
                </div>

                <!-- Loading overlay -->
                <div class="loading-overlay" id="map-loading">
                    <div class="loading-spinner"></div>
                    <div class="loading-text">Loading map data...</div>
                </div>
            </div>

            <!-- Control panel -->
            <div class="control-panel">
                <!-- Criteria section -->
                <div class="panel-section">
                    <h2 class="panel-title">
                        <i class="fas fa-sliders"></i>
                        <span>Ranking Criteria</span>
                    </h2>

                    <div class="criteria-list" id="criteria-list">
                        <!-- Default criteria items -->
                        <div class="criteria-item" data-id="schoolRating">
                            <div class="criteria-header">
                                <label class="criteria-name">
                                    <input type="checkbox" class="criteria-enabled" checked>
                                    School Rating
                                </label>
                                <button type="button" class="delete-criterion" title="Remove criterion">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="criteria-range">
                                <span class="weight-label">Weight:</span>
                                <input type="number" class="criteria-weight" value="1.0" min="0.1" max="5" step="0.1">
                                <input type="checkbox" id="school-invert"> Invert
                            </div>
                        </div>

                        <div class="criteria-item" data-id="nicheRating">
                            <div class="criteria-header">
                                <label class="criteria-name">
                                    <input type="checkbox" class="criteria-enabled" checked>
                                    Niche Rating
                                </label>
                                <button type="button" class="delete-criterion" title="Remove criterion">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="criteria-range">
                                <span class="weight-label">Weight:</span>
                                <input type="number" class="criteria-weight" value="1.0" min="0.1" max="5" step="0.1">
                                <input type="checkbox" id="niche-invert"> Invert
                            </div>
                        </div>

                        <div class="criteria-item" data-id="crimeRate">
                            <div class="criteria-header">
                                <label class="criteria-name">
                                    <input type="checkbox" class="criteria-enabled" checked>
                                    Crime Rate
                                </label>
                                <button type="button" class="delete-criterion" title="Remove criterion">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="criteria-range">
                                <span class="weight-label">Weight:</span>
                                <input type="number" class="criteria-weight" value="1.0" min="0.1" max="5" step="0.1">
                                <input type="checkbox" id="crime-invert" checked> Invert
                            </div>
                        </div>

                        <div class="criteria-item" data-id="commuteTime">
                            <div class="criteria-header">
                                <label class="criteria-name">
                                    <input type="checkbox" class="criteria-enabled" checked>
                                    Commute Time
                                </label>
                                <button type="button" class="delete-criterion" title="Remove criterion">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="criteria-range">
                                <span class="weight-label">Weight:</span>
                                <input type="number" class="criteria-weight" value="1.0" min="0.1" max="5" step="0.1">
                                <input type="checkbox" id="commute-invert" checked> Invert
                            </div>
                        </div>
                    </div>

                    <div class="add-criterion-form">
                        <div class="form-group">
                            <label class="form-label">Add Custom Criterion</label>
                            <input type="text" class="form-input" id="new-criterion-name" placeholder="Enter criterion name">
                        </div>
                        <div class="form-group">
                            <select class="form-select" id="new-criterion-type">
                                <option value="normal">Higher is better</option>
                                <option value="inverse">Lower is better</option>
                            </select>
                        </div>
                        <div class="action-buttons">
                            <button class="btn btn-primary btn-block" id="add-criterion-btn">
                                <i class="fas fa-plus"></i> Add Criterion
                            </button>
                        </div>
                    </div>

                    <div class="action-buttons">
                        <button class="btn btn-success" id="apply-criteria-btn">
                            <i class="fas fa-check"></i> Apply Changes
                        </button>
                        <button class="btn btn-secondary" id="reset-criteria-btn">
                            <i class="fas fa-undo"></i> Reset
                        </button>
                    </div>
                </div>

                <!-- Details section -->
                <div class="details-section">
                    <h2 class="panel-title">
                        <i class="fas fa-info-circle"></i>
                        <span>Zipcode Details</span>
                    </h2>

                    <div class="details-content" id="details-content">
                        <div class="details-placeholder">
                            <i class="fas fa-map-pin"></i>
                            <p>Click on a zipcode to view details</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Update confirmation modal -->
    <div class="modal-backdrop" id="update-modal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Update Map Data</h3>
                <button class="modal-close" id="close-modal">&times;</button>
            </div>
            <div class="modal-body">
                <p>This will refresh all zipcode data from the database. The process might take a few moments to complete.</p>
                <p>Do you want to proceed?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="cancel-update">Cancel</button>
                <button class="btn btn-primary" id="confirm-update">
                    <i class="fas fa-sync-alt"></i> Update Data
                </button>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    
    <script>
        // App configuration
        const config = {
            apiBaseUrl: '/housing_api',
            mapCenter: [37.8, -122.2], // Bay Area center
            mapZoom: 9,
            mapMinZoom: 8,
            mapMaxZoom: 14,
            dataRefreshInterval: 86400000 // 24 hours in milliseconds
        };

        // Global app state
        const state = {
            map: null,
            zipcodeLayer: null,
            zipcodeData: null,
            selectedZipcode: null,
            lastUpdated: null,
            isLoading: false,
            criteria: [
                { id: 'schoolRating', name: 'School Rating', enabled: true, weight: 1.0, invert: false },
                { id: 'nicheRating', name: 'Niche Rating', enabled: true, weight: 1.0, invert: false },
                { id: 'crimeRate', name: 'Crime Rate', enabled: true, weight: 1.0, invert: true },
                { id: 'commuteTime', name: 'Commute Time', enabled: true, weight: 1.0, invert: true }
            ]
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', () => {
            initMap();
            setupEventListeners();
            loadZipcodeData();

            // Check if data refresh is needed based on last update time
            checkDataRefreshStatus();
        });

        // Initialize Leaflet map
        function initMap() {
            state.map = L.map('map', {
                center: config.mapCenter,
                zoom: config.mapZoom,
                minZoom: config.mapMinZoom,
                maxZoom: config.mapMaxZoom,
                zoomControl: false
            });

            // Add zoom control in a better position
            L.control.zoom({ position: 'topright' }).addTo(state.map);

            // Add tile layer (OpenStreetMap)
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(state.map);
        }

        // Set up event listeners
        function setupEventListeners() {
            // Criteria management
            document.getElementById('add-criterion-btn').addEventListener('click', addCustomCriterion);
            document.getElementById('apply-criteria-btn').addEventListener('click', applyCriteriaChanges);
            document.getElementById('reset-criteria-btn').addEventListener('click', resetCriteria);

            // Criteria invert checkboxes
            document.getElementById('school-invert').addEventListener('change', function() {
                updateCriterionInversion('schoolRating', this.checked);
            });
            document.getElementById('niche-invert').addEventListener('change', function() {
                updateCriterionInversion('nicheRating', this.checked);
            });
            document.getElementById('crime-invert').addEventListener('change', function() {
                updateCriterionInversion('crimeRate', this.checked);
            });
            document.getElementById('commute-invert').addEventListener('change', function() {
                updateCriterionInversion('commuteTime', this.checked);
            });

            // Setup delete criterion buttons (for dynamically added criteria)
            document.querySelectorAll('.delete-criterion').forEach(btn => {
                btn.addEventListener('click', function() {
                    const criterionItem = this.closest('.criteria-item');
                    const criterionId = criterionItem.dataset.id;
                    removeCriterion(criterionId);
                });
            });

            // Data refresh
            document.getElementById('update-data-btn').addEventListener('click', showUpdateConfirmation);
            document.getElementById('close-modal').addEventListener('click', hideUpdateConfirmation);
            document.getElementById('cancel-update').addEventListener('click', hideUpdateConfirmation);
            document.getElementById('confirm-update').addEventListener('click', updateData);
            
            // Window resize handler for map
            window.addEventListener('resize', function() {
                if (state.map) {
                    state.map.invalidateSize();
                }
            });
        }
        
        // Load zipcode data from the API
        async function loadZipcodeData() {
            setLoading(true);
            
            try {
                // Fetch zipcode GeoJSON from API
                const response = await fetch(`${config.apiBaseUrl}/zipcodes/geojson/`);
                
                if (!response.ok) {
                    throw new Error(`Failed to load zipcode data (${response.status})`);
                }
                
                const data = await response.json();
                
                // Store the data
                state.zipcodeData = data;
                
                // Update last updated timestamp
                updateLastUpdatedTime();
                
                // Render the map
                renderZipcodeMap();
                
            } catch (error) {
                console.error('Error loading zipcode data:', error);
                showError(`Failed to load zipcode data: ${error.message}`);
            } finally {
                setLoading(false);
            }
        }
        
        // Render zipcode polygons on the map
        function renderZipcodeMap() {
            if (!state.zipcodeData || !state.zipcodeData.features) {
                console.error('No valid zipcode data to render');
                return;
            }
            
            // Remove existing layer if present
            if (state.zipcodeLayer) {
                state.map.removeLayer(state.zipcodeLayer);
            }
            
            // Calculate scores for each zipcode
            const scores = calculateZipcodeScores();
            
            // Create color scale using d3
            const colorScale = d3.scaleSequential(d3.interpolateRdYlBu)
                .domain([0, 10]);  // Scores from 0-10
            
            // Create new GeoJSON layer
            state.zipcodeLayer = L.geoJSON(state.zipcodeData, {
                style: feature => {
                    const zipcode = feature.properties.ZIP || feature.properties.ZCTA5CE10;
                    const score = scores[zipcode] || 0;
                    
                    return {
                        fillColor: colorScale(score),
                        weight: 1,
                        opacity: 1,
                        color: 'white',
                        fillOpacity: 0.7
                    };
                },
                onEachFeature: (feature, layer) => {
                    const zipcode = feature.properties.ZIP || feature.properties.ZCTA5CE10;
                    const name = feature.properties.NAME || 'Area';
                    
                    // Add tooltip
                    layer.bindTooltip(`${name} (${zipcode})`, {
                        sticky: true
                    });
                    
                    // Add click handler
                    layer.on('click', () => {
                        selectZipcode(zipcode, feature);
                        
                        // Highlight the selected zipcode
                        state.zipcodeLayer.eachLayer(l => {
                            if (l.feature) {
                                const thisZip = l.feature.properties.ZIP || l.feature.properties.ZCTA5CE10;
                                
                                l.setStyle({
                                    weight: thisZip === zipcode ? 2 : 1,
                                    color: thisZip === zipcode ? '#000' : '#fff'
                                });
                                
                                if (thisZip === zipcode) {
                                    l.bringToFront();
                                }
                            }
                        });
                    });
                }
            }).addTo(state.map);
            
            // Fit the map to the zipcode boundaries
            state.map.fitBounds(state.zipcodeLayer.getBounds());
        }
        
        // Calculate scores for each zipcode based on current criteria
        function calculateZipcodeScores() {
            const scores = {};
            
            if (!state.zipcodeData || !state.zipcodeData.features) {
                return scores;
            }
            
            // Get active criteria
            const activeCriteria = state.criteria.filter(c => c.enabled);
            
            if (activeCriteria.length === 0) {
                return scores;
            }
            
            // Calculate scores for each zipcode
            state.zipcodeData.features.forEach(feature => {
                const zipcode = feature.properties.ZIP || feature.properties.ZCTA5CE10;
                let totalScore = 0;
                let totalWeight = 0;
                
                activeCriteria.forEach(criterion => {
                    const value = feature.properties[criterion.id];
                    
                    // Skip if value is missing
                    if (value === undefined || value === null) {
                        return;
                    }
                    
                    let score = value;
                    
                    // If invert is true, higher values should score lower
                    if (criterion.invert) {
                        // Assume a scale of 0-10 for all criteria
                        score = 10 - score;
                    }
                    
                    totalScore += score * criterion.weight;
                    totalWeight += criterion.weight;
                });
                
                // Calculate final score (weighted average)
                if (totalWeight > 0) {
                    scores[zipcode] = totalScore / totalWeight;
                } else {
                    scores[zipcode] = 0;
                }
            });
            
            return scores;
        }
        
        // Handle zipcode selection
        function selectZipcode(zipcode, feature) {
            state.selectedZipcode = zipcode;
            
            // Update details panel
            updateDetailsPanel(zipcode, feature);
        }
        
        // Update the details panel with zipcode information
        function updateDetailsPanel(zipcode, feature) {
            const detailsContainer = document.getElementById('details-content');
            
            if (!feature || !feature.properties) {
                detailsContainer.innerHTML = `<div class="details-placeholder">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>No data available for this zipcode</p>
                </div>`;
                return;
            }
            
            const props = feature.properties;
            const scores = calculateZipcodeScores();
            const score = scores[zipcode] ? scores[zipcode].toFixed(1) : 'N/A';
            
            let html = `
                <div class="zipcode-details">
                    <div class="zipcode-title">
                        <div class="zipcode-name">${props.NAME || 'Area'} (${zipcode})</div>
                        <div class="score-pill">${score}</div>
                    </div>
                    
                    <div class="rating-list">
            `;
            
            // Add each rating
            state.criteria.forEach(criterion => {
                const value = props[criterion.id];
                
                if (value !== undefined && value !== null) {
                    html += `
                        <div class="rating-item">
                            <div class="rating-name">${criterion.name}</div>
                            <div class="rating-value">${value.toFixed(1)}/10</div>
                        </div>
                    `;
                }
            });
            
            // Add additional information if available
            if (props.county) {
                html += `
                    <div class="rating-item">
                        <div class="rating-name">County</div>
                        <div class="rating-value">${props.county}</div>
                    </div>
                `;
            }
            
            if (props.population) {
                html += `
                    <div class="rating-item">
                        <div class="rating-name">Population</div>
                        <div class="rating-value">${props.population.toLocaleString()}</div>
                    </div>
                `;
            }
            
            html += `
                    </div>
                </div>
            `;
            
            detailsContainer.innerHTML = html;
        }
        
        // Add a custom criterion
        function addCustomCriterion() {
            const nameInput = document.getElementById('new-criterion-name');
            const typeSelect = document.getElementById('new-criterion-type');
            
            const criterionName = nameInput.value.trim();
            const isInverse = typeSelect.value === 'inverse';
            
            if (!criterionName) {
                alert('Please enter a criterion name');
                return;
            }
            
            // Generate ID from name (lowercase, spaces to underscores)
            const criterionId = 'custom_' + criterionName.toLowerCase().replace(/[^a-z0-9]/g, '_');
            
            // Check if ID already exists
            if (state.criteria.some(c => c.id === criterionId)) {
                alert('A criterion with this name already exists');
                return;
            }
            
            // Add to criteria list
            state.criteria.push({
                id: criterionId,
                name: criterionName,
                enabled: true,
                weight: 1.0,
                invert: isInverse
            });
            
            // Add to UI
            addCriterionToUI(criterionId, criterionName, isInverse);
            
            // Clear form
            nameInput.value = '';
            typeSelect.value = 'normal';
        }
        
        // Add a criterion to the UI
        function addCriterionToUI(id, name, isInverse) {
            const criteriaList = document.getElementById('criteria-list');
            
            const criterionItem = document.createElement('div');
            criterionItem.className = 'criteria-item';
            criterionItem.dataset.id = id;
            
            criterionItem.innerHTML = `
                <div class="criteria-header">
                    <label class="criteria-name">
                        <input type="checkbox" class="criteria-enabled" checked>
                        ${name}
                    </label>
                    <button type="button" class="delete-criterion" title="Remove criterion">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="criteria-range">
                    <span class="weight-label">Weight:</span>
                    <input type="number" class="criteria-weight" value="1.0" min="0.1" max="5" step="0.1">
                    <input type="checkbox" id="${id}-invert" ${isInverse ? 'checked' : ''}> Invert
                </div>
            `;
            
            criteriaList.appendChild(criterionItem);
            
            // Add event listeners
            const deleteBtn = criterionItem.querySelector('.delete-criterion');
            deleteBtn.addEventListener('click', function() {
                removeCriterion(id);
            });
            
            const invertCheckbox = criterionItem.querySelector(`#${id}-invert`);
            invertCheckbox.addEventListener('change', function() {
                updateCriterionInversion(id, this.checked);
            });
        }
        
        // Remove a criterion
        function removeCriterion(criterionId) {
            // Remove from state
            state.criteria = state.criteria.filter(c => c.id !== criterionId);
            
            // Remove from UI
            const criterionItem = document.querySelector(`.criteria-item[data-id="${criterionId}"]`);
            if (criterionItem) {
                criterionItem.remove();
            }
        }
        
        // Update criterion inversion setting
        function updateCriterionInversion(criterionId, isInverted) {
            const criterion = state.criteria.find(c => c.id === criterionId);
            if (criterion) {
                criterion.invert = isInverted;
            }
        }
        
        // Apply criteria changes and update the map
        function applyCriteriaChanges() {
            // Update criteria from UI
            document.querySelectorAll('.criteria-item').forEach(item => {
                const id = item.dataset.id;
                const criterion = state.criteria.find(c => c.id === id);
                
                if (criterion) {
                    criterion.enabled = item.querySelector('.criteria-enabled').checked;
                    criterion.weight = parseFloat(item.querySelector('.criteria-weight').value);
                    // Inversion is already handled by the checkbox event listeners
                }
            });
            
            // Re-render the map
            renderZipcodeMap();
            
            // Update details panel if a zipcode is selected
            if (state.selectedZipcode) {
                const feature = state.zipcodeData.features.find(f => {
                    const zipcode = f.properties.ZIP || f.properties.ZCTA5CE10;
                    return zipcode === state.selectedZipcode;
                });
                
                if (feature) {
                    updateDetailsPanel(state.selectedZipcode, feature);
                }
            }
        }
        
        // Reset criteria to defaults
        function resetCriteria() {
            // Reset to initial criteria state
            state.criteria = [
                { id: 'schoolRating', name: 'School Rating', enabled: true, weight: 1.0, invert: false },
                { id: 'nicheRating', name: 'Niche Rating', enabled: true, weight: 1.0, invert: false },
                { id: 'crimeRate', name: 'Crime Rate', enabled: true, weight: 1.0, invert: true },
                { id: 'commuteTime', name: 'Commute Time', enabled: true, weight: 1.0, invert: true }
            ];
            
            // Reset UI
            document.getElementById('criteria-list').innerHTML = '';
            
            // Re-add default criteria to UI
            const defaultCriteria = [
                { id: 'schoolRating', name: 'School Rating', invert: false },
                { id: 'nicheRating', name: 'Niche Rating', invert: false },
                { id: 'crimeRate', name: 'Crime Rate', invert: true },
                { id: 'commuteTime', name: 'Commute Time', invert: true }
            ];
            
            defaultCriteria.forEach(c => {
                addCriterionToUI(c.id, c.name, c.invert);
            });
            
            // Clear custom input fields
            document.getElementById('new-criterion-name').value = '';
            document.getElementById('new-criterion-type').value = 'normal';
            
            // Re-render map
            renderZipcodeMap();
        }
        
        // Show confirmation modal for data update
        function showUpdateConfirmation() {
            document.getElementById('update-modal').classList.add('active');
        }
        
        // Hide update confirmation modal
        function hideUpdateConfirmation() {
            document.getElementById('update-modal').classList.remove('active');
        }
        
        // Update data from the server
        function updateData() {
            hideUpdateConfirmation();
            setLoading(true);
            
            // Show progress indicator
            const progressIndicator = document.getElementById('progress-indicator');
            const progressBar = document.getElementById('progress-bar');
            
            progressIndicator.classList.add('active');
            
            // Simulate progress (in a real app, we'd use actual progress events)
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 10;
                if (progress > 100) progress = 100;
                
                progressBar.style.width = `${progress}%`;
                
                if (progress >= 100) {
                    clearInterval(progressInterval);
                }
            }, 300);
            
            // Make API request to trigger data update
            fetch(`${config.apiBaseUrl}/update-data/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server returned ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // Ensure progress bar reaches 100%
                progressBar.style.width = '100%';
                
                // Show success message
                alert('Data updated successfully!');
                
                // Reload zipcode data
                loadZipcodeData();
            })
            .catch(error => {
                console.error('Error updating data:', error);
                alert(`Failed to update data: ${error.message}`);
            })
            .finally(() => {
                // Hide progress indicator after a short delay
                setTimeout(() => {
                    progressIndicator.classList.remove('active');
                    progressBar.style.width = '0%';
                    setLoading(false);
                }, 500);
                
                clearInterval(progressInterval);
            });
        }
        
        // Check if data refresh is needed
        function checkDataRefreshStatus() {
            const lastUpdateTime = localStorage.getItem('lastDataUpdate');
            
            if (lastUpdateTime) {
                const lastUpdate = new Date(lastUpdateTime);
                const now = new Date();
                
                // Check if more than the refresh interval has passed
                if (now - lastUpdate > config.dataRefreshInterval) {
                    // If so, add a visual indicator to the refresh button
                    const updateBtn = document.getElementById('update-data-btn');
                    updateBtn.classList.add('needs-update');
                    
                    // Optionally, show a notification
                    // showNotification('Data refresh recommended');
                }
            }
        }
        
        // Update last updated time
        function updateLastUpdatedTime() {
            const now = new Date();
            state.lastUpdated = now;
            
            // Format the date/time
            const formattedDate = now.toLocaleDateString(undefined, {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
            
            const formattedTime = now.toLocaleTimeString(undefined, {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            const formattedDateTime = `${formattedDate} at ${formattedTime}`;
            
            // Update UI
            document.getElementById('last-updated').textContent = `Last updated: ${formattedDateTime}`;
            
            // Store in localStorage
            localStorage.setItem('lastDataUpdate', now.toISOString());
        }
        
        // Show loading state
        function setLoading(isLoading) {
            state.isLoading = isLoading;
            
            // Toggle loading overlay
            const loadingOverlay = document.getElementById('map-loading');
            
            if (isLoading) {
                loadingOverlay.classList.add('active');
            } else {
                loadingOverlay.classList.remove('active');
            }
        }
        
        // Show error message
        function showError(message) {
            alert(message);
        }
        
        // Show notification
        function showNotification(message) {
            // Create a notification element
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.innerHTML = `
                <i class="fas fa-info-circle"></i>
                <span>${message}</span>
                <button class="notification-close">×</button>
            `;
            
            // Add to document
            document.body.appendChild(notification);
            
            // Add animation class after a small delay (for transition effect)
            setTimeout(() => {
                notification.classList.add('show');
            }, 10);
            
            // Add close button handler
            notification.querySelector('.notification-close').addEventListener('click', () => {
                notification.classList.remove('show');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            });
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    notification.classList.remove('show');
                    setTimeout(() => {
                        if (document.body.contains(notification)) {
                            notification.remove();
                        }
                    }, 300);
                }
            }, 5000);
        }
    </script>
</body>
</html> 
